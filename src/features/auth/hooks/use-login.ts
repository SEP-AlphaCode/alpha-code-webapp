import { useMutation } from '@tanstack/react-query';
import { login, googleLogin } from '@/features/auth/api/auth-api';
import { useRouter } from 'next/navigation';
import { LoginRequest, TokenResponse, LoginWithProfileResponse } from '@/types/login';
import { getTokenPayload } from '@/utils/tokenUtils';
import { toast } from 'sonner';

export const useLogin = () => {
  const router = useRouter();

  return useMutation<LoginWithProfileResponse, Error, LoginRequest>({
    mutationFn: login,
    onSuccess: async (data) => {
      // Check for empty response
      if (!data || Object.keys(data).length === 0) {
        toast.error('L·ªói: M√°y ch·ªß tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng. Vui l√≤ng ki·ªÉm tra API endpoint.');
        return;
      }
      
      // TH1: Admin/Staff - c√≥ token ngay (kh√¥ng c·∫ßn profile)
      if (data.accessToken && data.refreshToken && !data.requiresProfile) {
        sessionStorage.setItem('accessToken', data.accessToken);
        sessionStorage.setItem('refreshToken', data.refreshToken);
        
        const accountData = getTokenPayload(data.accessToken);
        if (!accountData) {
          toast.error('L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n t·ª´ token');
          return;
        }
        
        toast.success(`Ch√†o m·ª´ng ${accountData.fullName}!`);
        
        const roleNameLower = accountData.roleName.toLowerCase();
        if (roleNameLower === 'admin') {
          router.push('/admin');
        } else if (roleNameLower === 'staff') {
          router.push('/staff');
        } else if (roleNameLower === 'parent') {
          router.push('/parent');
        } else if (roleNameLower === 'children') {
          router.push('/children');
        } else {
          // fallback for other roles
          router.push('/');
        }
        return;
      }
      
      // TH2: User - c·∫ßn x·ª≠ l√Ω profile
      if (data.requiresProfile) {
        console.log('üîç Debug - Login response with requiresProfile:', data);
        
        // L∆∞u accountId ƒë·ªÉ d√πng khi t·∫°o profile
        // Backend c√≥ th·ªÉ tr·∫£ v·ªÅ accountId (camelCase) ho·∫∑c accountid (lowercase)
        let accountIdToSave = data.accountId || data.accountid;
        
        if (!accountIdToSave && data.accessToken) {
          const accountData = getTokenPayload(data.accessToken);
          if (accountData?.id) {
            accountIdToSave = accountData.id;
            console.log('üîç Got accountId from token payload:', accountIdToSave);
          }
        }
        
        if (accountIdToSave) {
          sessionStorage.setItem('pendingAccountId', accountIdToSave);
          console.log('üíæ Saved pendingAccountId to sessionStorage:', accountIdToSave);
        } else {
          console.warn('‚ö†Ô∏è No accountId available from backend or token');
        }
        
        // TH2.1: Ch∆∞a c√≥ profile ‚Üí T·∫°o profile Parent
        if (!data.profiles || data.profiles.length === 0) {
          toast.info('Vui l√≤ng t·∫°o profile ƒë·ªÉ ti·∫øp t·ª•c');
          router.push('/create-parent-profile');
          return;
        }
        
        // TH2.2: ƒê√£ c√≥ profile ‚Üí Ch·ªçn profile
        // L∆∞u t·∫°m danh s√°ch profiles v√†o sessionStorage
        sessionStorage.setItem('availableProfiles', JSON.stringify(data.profiles));
        router.push('/select-profile');
        return;
      }
      
      // Tr∆∞·ªùng h·ª£p kh√¥ng r√µ r√†ng
      toast.error('Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá');
    },
    onError: (error) => {
      console.error('Login error:', error);
      
      // Handle network errors
      const err = error as Error & { 
        response?: { 
          status: number; 
          data?: unknown; 
        };
        request?: unknown;
      };
      if (err.response) {
        if (err.response.status === 404) {
          toast.error('API endpoint kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh m√°y ch·ªß.');
        } else if (err.response.status === 401) {
          toast.error('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.');
        } else if (err.response.status >= 500) {
          toast.error('L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
          toast.error(`L·ªói API: ${err.response.status}`);
        }
      } else if (err.request) {
        // Network error
        toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
      } else {
        // Other error
        toast.error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!');
      }
    }
  });
};

export const useGoogleLogin = () => {
  const router = useRouter();

  return useMutation<LoginWithProfileResponse, Error, string>({
    mutationFn: googleLogin, // Nh·∫≠n v√†o idToken (string)
    onSuccess: async (data) => {
      // Check for empty response
      if (!data || Object.keys(data).length === 0) {
        toast.error('L·ªói: M√°y ch·ªß tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng. Vui l√≤ng ki·ªÉm tra API endpoint.');
        return;
      }

      // TH1: Admin/Staff - c√≥ token ngay (kh√¥ng c·∫ßn profile)
      if (data.accessToken && data.refreshToken && !data.requiresProfile) {
        sessionStorage.setItem('accessToken', data.accessToken);
        sessionStorage.setItem('refreshToken', data.refreshToken);

        const accountData = getTokenPayload(data.accessToken);
        if (!accountData) {
          toast.error('L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n t·ª´ token');
          return;
        }

        toast.success(`Ch√†o m·ª´ng ${accountData.fullName}!`);

        const roleNameLower = accountData.roleName.toLowerCase();
        if (roleNameLower === 'admin') {
          router.push('/admin');
        } else if (roleNameLower === 'staff') {
          router.push('/staff');
        } else if (roleNameLower === 'parent') {
          router.push('/parent');
        } else if (roleNameLower === 'children') {
          router.push('/children');
        } else {
          // fallback for other roles
          router.push('/');
        }
        return;
      }

      // TH2: User - c·∫ßn x·ª≠ l√Ω profile
      if (data.requiresProfile) {
        console.log('üîç Debug - Google Login response with requiresProfile:', data);

        // L∆∞u accountId ƒë·ªÉ d√πng khi t·∫°o profile
        let accountIdToSave = data.accountId || data.accountid;

        if (!accountIdToSave && data.accessToken) {
          const accountData = getTokenPayload(data.accessToken);
          if (accountData?.id) {
            accountIdToSave = accountData.id;
            console.log('üîç Got accountId from token payload:', accountIdToSave);
          }
        }

        if (accountIdToSave) {
          sessionStorage.setItem('pendingAccountId', accountIdToSave);
          console.log('üíæ Saved pendingAccountId to sessionStorage:', accountIdToSave);
        } else {
          console.warn('‚ö†Ô∏è No accountId available from backend or token');
        }

        // TH2.1: Ch∆∞a c√≥ profile ‚Üí T·∫°o profile Parent
        if (!data.profiles || data.profiles.length === 0) {
          toast.info('Vui l√≤ng t·∫°o profile ƒë·ªÉ ti·∫øp t·ª•c');
          router.push('/create-parent-profile');
          return;
        }

        // TH2.2: ƒê√£ c√≥ profile ‚Üí Ch·ªçn profile
        sessionStorage.setItem('availableProfiles', JSON.stringify(data.profiles));
        router.push('/select-profile');
        return;
      }

      // Tr∆∞·ªùng h·ª£p kh√¥ng r√µ r√†ng
      toast.error('Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá');
    },
    onError: (error) => {
      console.error('Google Login error:', error);

      const err = error as Error & {
        response?: {
          status: number;
          data?: unknown;
        };
        request?: unknown;
      };
      if (err.response) {
        if (err.response.status === 404) {
          toast.error('API endpoint kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh m√°y ch·ªß.');
        } else if (err.response.status === 401) {
          toast.error('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.');
        } else if (err.response.status >= 500) {
          toast.error('L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
          toast.error(`L·ªói API: ${err.response.status}`);
        }
      } else if (err.request) {
        toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
      } else {
        toast.error('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!');
      }
    },
  });
};