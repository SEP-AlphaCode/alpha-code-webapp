"use client";

import React, { useState, useEffect } from "react";

import { useRobotStore } from "@/hooks/use-robot-store";

// Import extracted components
import { RobotPageHeader } from "@/components/parent/robot/robot-page-header";
import { RobotGrid } from "@/components/parent/robot/robot-grid";
import { RobotDetails } from "@/components/parent/robot/robot-details";
import { ProgrammingSection } from "@/components/parent/robot/programming-section";
import { EntertainmentSection } from "@/components/parent/robot/entertainment-section";
import { ThingsToTrySection } from "@/components/parent/robot/things-to-try-section";

// Import tƒ©nh c·∫£ hai file ng√¥n ng·ªØ

// Hardcoded Vietnamese prompts for "Things to Try"
const thingsToTryPrompts = [
  "H√£y th·ª≠ cho robot nh·∫£y m·ªôt ƒëi·ªáu nh·∫°c vui nh·ªôn!",
  "Y√™u c·∫ßu robot k·ªÉ m·ªôt c√¢u chuy·ªán cho l·ªõp h·ªçc.",
  "H·ªèi robot v·ªÅ th·ªùi ti·∫øt h√¥m nay.",
  "Cho robot ch∆°i tr√≤ ch∆°i ƒëo√°n h√¨nh.",
  "H∆∞·ªõng d·∫´n robot ch·ª•p ·∫£nh c√πng h·ªçc sinh.",
  "Th·ª≠ cho robot h√°t m·ªôt b√†i h√°t thi·∫øu nhi.",
  "Y√™u c·∫ßu robot gi·∫£i th√≠ch m·ªôt kh√°i ni·ªám khoa h·ªçc ƒë∆°n gi·∫£n."
];

// Define Robot type to match component expectations - extending Redux Robot type
interface ExtendedRobot {
  id: string;
  name: string;
  status: "online" | "offline" | "charging" | "busy";
  battery: number | null;
  lastSeen: string;
  version: string;
  ctrl_version: string;
  firmware_version: string;
  students: number;
  currentTask: string;
  uptime: string;
  ip: string;
  temperature: number;
  image: string;
  serialNumber: string;
  robotmodel: string | undefined;
}

// H√†m x√°o tr·ªôn m·∫£ng ng·∫´u nhi√™n
function shuffleArray(array: string[]) {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

// Function to extend Redux Robot with additional mock data
function extendRobotWithMockData(robot: ReturnType<typeof useRobotStore>['robots'][0], index: number): ExtendedRobot {
  const mockData = [
    {
      lastSeen: "2 minutes ago",
      version: "v2.1.3",
      students: 6,
      currentTask: "Teaching Colors",
      uptime: "4h 23m",
      ip: "192.168.1.101",
      temperature: 32,
      image: "/alpha-mini-2.webp",
    },
    {
      lastSeen: "1 minute ago",
      version: "v2.1.3",
      students: 4,
      currentTask: "Programming Basics",
      uptime: "3h 45m",
      ip: "192.168.1.102",
      temperature: 29,
      image: "/alpha-mini-2.webp",
    },
    {
      lastSeen: "5 minutes ago",
      version: "v2.1.2",
      students: 2,
      currentTask: "Charging",
      uptime: "1h 12m",
      ip: "192.168.1.103",
      temperature: 26,
      image: "/alpha-mini-2.webp",
    },
  ];

  const mockInfo = mockData[index] || mockData[0];

  return {
    id: robot.id,
    name: robot.name,
    // ‚úÖ Gi·ªØ nguy√™n status th·∫≠t, fallback ‚Äúoffline‚Äù
    status: robot.status || "offline",
    // ‚úÖ N·∫øu pin kh√¥ng c√≥, ƒë·ªÉ null ƒë·ªÉ RobotGrid t·ª± ·∫©n
    battery: typeof robot.battery === "number" ? robot.battery : null,
    ctrl_version: robot.ctrl_version || "",
    firmware_version: robot.firmware_version || "",
    serialNumber: robot.serial,
    robotmodel: robot.robotModelName ?? "",
    ...mockInfo,
  };
}

export default function UserDashboard() {
  const { robots, selectedRobotSerial, selectRobot, initializeMockData, connectMode } = useRobotStore();
  const [shuffledPrompts, setShuffledPrompts] = useState<string[]>([]);
  const [selectedModelName, setSelectedModelName] = useState<string>(""); // ‚úÖ th√™m state model
  const [hasInitialized, setHasInitialized] = useState(false);
  


  useEffect(() => {
  if (connectMode === "single") {
    setSelectedModelName(""); // üëà hi·ªÉn th·ªã l·∫°i t·∫•t c·∫£ robot
    selectRobot(""); // üëà b·ªè ch·ªçn robot c≈© (n·∫øu c·∫ßn)
    sessionStorage.removeItem("selectedRobotSerial");
  }
}, [connectMode]);

  useEffect(() => {
    initializeMockData();
  }, []);

  useEffect(() => {
    setShuffledPrompts(shuffleArray(thingsToTryPrompts));
  }, []);

  const handleRefreshPrompts = () => {
    setShuffledPrompts(shuffleArray(thingsToTryPrompts));
  };

  const extendedRobots: ExtendedRobot[] = robots.map((robot, index) =>
    extendRobotWithMockData(robot, index)
  );

  // ‚úÖ L·ªçc robot theo model ƒë∆∞·ª£c ch·ªçn (n·∫øu c√≥)
  const filteredRobots = selectedModelName
    ? extendedRobots.filter((r) => r.robotmodel === selectedModelName)
    : extendedRobots

  const selectedRobotDetails =
    filteredRobots.find((robot) => robot.serialNumber === selectedRobotSerial) || null;

  return (
    <div className="space-y-10 p-10">
      <RobotPageHeader
        title="Qu·∫£n l√Ω robot"
        subtitle="Qu·∫£n l√Ω v√† t∆∞∆°ng t√°c v·ªõi c√°c robot AlphaMini c·ªßa b·∫°n"
        onModelSelect={(modelName) => {
          setSelectedModelName(modelName)
          selectRobot("") // üëà reset robot ƒëang ch·ªçn trong store
          sessionStorage.removeItem("selectedRobotSerial") // üëà x√≥a kh·ªèi sessionStorage lu√¥n
        }}
      />

      <RobotGrid
        robots={filteredRobots} // ‚úÖ truy·ªÅn danh s√°ch ƒë√£ l·ªçc
        selectedRobot={selectedRobotSerial}
        onRobotSelect={(robotSerial) => {
          selectRobot(robotSerial);
          const robot = filteredRobots.find(r => r.serialNumber === robotSerial);
          if (robot) {
            sessionStorage.setItem("selectedRobotSerial", robot.serialNumber);
          }
        }}
        sectionTitle="Danh s√°ch robot"
        statusTexts={{
          online: "ƒêang ho·∫°t ƒë·ªông",
          offline: "Ngo·∫°i tuy·∫øn",
          charging: "ƒêang s·∫°c",
        }}
      />

      {selectedRobotDetails && (
        <RobotDetails
          robot={selectedRobotDetails}
          translations={{
            systemInfo: {
              title: "Th√¥ng tin h·ªá th·ªëng",
              firmware: "Phi√™n b·∫£n ph·∫ßn m·ªÅm",
              ctrl: "Phi√™n b·∫£n ƒëi·ªÅu khi·ªÉn",
              temperature: "Nhi·ªát ƒë·ªô",
              robotmodel: "M·∫´u robot",
            },
            currentStatus: {
              title: "Tr·∫°ng th√°i hi·ªán t·∫°i",
              status: "Tr·∫°ng th√°i",
              task: "Nhi·ªám v·ª•",
              battery: "Pin",
            },
            quickActions: {
              title: "T√°c v·ª• nhanh",
              restart: "T·∫Øt ngu·ªìn - Kh·ªüi ƒë·ªông l·∫°i",
              settings: "C√†i ƒë·∫∑t",
              forceStop: "D·ª´ng h√†nh ƒë·ªông",
            },
            statusTexts: {
              online: "ƒêang ho·∫°t ƒë·ªông",
              offline: "Ngo·∫°i tuy·∫øn",
              charging: "ƒêang s·∫°c",
            },
          }}
        />
      )}

      <ProgrammingSection
        title="L·∫≠p tr√¨nh"
        items={{
          createActions: "T·∫°o h√†nh ƒë·ªông",
          workspace: "Kh√¥ng gian l·∫≠p tr√¨nh",
          myWorks: "C√¥ng vi·ªác c·ªßa t√¥i",
        }}
      />

      <EntertainmentSection
        title="Gi·∫£i tr√≠"
        items={{
          action: "H√†nh ƒë·ªông vui nh·ªôn",
          album: "Album ·∫£nh",
          friends: "B·∫°n b√®",
        }}
      />

      <ThingsToTrySection
        title="Nh·ªØng ƒëi·ªÅu n√™n th·ª≠"
        refreshText="L√†m m·ªõi ƒë·ªÅ xu·∫•t"
        prompts={shuffledPrompts}
        onRefresh={handleRefreshPrompts}
      />
    </div>
  );
}